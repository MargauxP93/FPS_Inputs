//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/FPSInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FPSInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FPSInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FPSInputs"",
    ""maps"": [
        {
            ""name"": ""FPS"",
            ""id"": ""d1e885ea-7f7c-41bd-9b6f-1b5eb2c3c2bb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0828dbfe-b6ec-48dd-b7d7-401ecb9643c5"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""fcbdb3ae-9ffb-4456-9639-c5cf9e7a533e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""f928322f-55e4-4f8b-85a1-2ff0d6b29b90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AutoFire"",
                    ""type"": ""Button"",
                    ""id"": ""3437f0f5-cfa0-4ff9-a722-b0ac211700c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""6d315393-5f3c-4aed-899b-fe926c022a55"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c7d22ca3-fa4b-4ee4-b913-086831ea6c95"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""91721694-76a6-44f9-9381-f88833eae1fe"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""67f06b99-258b-401b-9ac6-cb527336d02c"",
                    ""path"": ""<Keyboard>/#(Q)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""512b1365-e22b-40ce-bf42-571a8d2353e4"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""d1e18a52-6ed9-4802-ac9e-1c27fc6992d0"",
                    ""path"": ""<Keyboard>/#(Z)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""44b3771a-454c-4a4a-99ba-dceef62ffd93"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1773e9c6-b91b-4029-a40d-f85f7f962366"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89ffb7b3-29f1-4366-b0e8-1b9a5088decf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7cc5098-b4a9-4f7f-9b0a-c8ff3f4ca505"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AutoFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPS
        m_FPS = asset.FindActionMap("FPS", throwIfNotFound: true);
        m_FPS_Movement = m_FPS.FindAction("Movement", throwIfNotFound: true);
        m_FPS_Rotate = m_FPS.FindAction("Rotate", throwIfNotFound: true);
        m_FPS_Fire = m_FPS.FindAction("Fire", throwIfNotFound: true);
        m_FPS_AutoFire = m_FPS.FindAction("AutoFire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPS
    private readonly InputActionMap m_FPS;
    private List<IFPSActions> m_FPSActionsCallbackInterfaces = new List<IFPSActions>();
    private readonly InputAction m_FPS_Movement;
    private readonly InputAction m_FPS_Rotate;
    private readonly InputAction m_FPS_Fire;
    private readonly InputAction m_FPS_AutoFire;
    public struct FPSActions
    {
        private @FPSInputs m_Wrapper;
        public FPSActions(@FPSInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_FPS_Movement;
        public InputAction @Rotate => m_Wrapper.m_FPS_Rotate;
        public InputAction @Fire => m_Wrapper.m_FPS_Fire;
        public InputAction @AutoFire => m_Wrapper.m_FPS_AutoFire;
        public InputActionMap Get() { return m_Wrapper.m_FPS; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSActions set) { return set.Get(); }
        public void AddCallbacks(IFPSActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @AutoFire.started += instance.OnAutoFire;
            @AutoFire.performed += instance.OnAutoFire;
            @AutoFire.canceled += instance.OnAutoFire;
        }

        private void UnregisterCallbacks(IFPSActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @AutoFire.started -= instance.OnAutoFire;
            @AutoFire.performed -= instance.OnAutoFire;
            @AutoFire.canceled -= instance.OnAutoFire;
        }

        public void RemoveCallbacks(IFPSActions instance)
        {
            if (m_Wrapper.m_FPSActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSActions @FPS => new FPSActions(this);
    public interface IFPSActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnAutoFire(InputAction.CallbackContext context);
    }
}
